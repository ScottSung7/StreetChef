package 오픈중;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.swing.JFrame;

import A_시나리오.시나리오;
import A_시나리오.음악;
import 오픈중.요리모음.메뉴;
import 오픈중.요리모음.요리;
import 캐릭터들.손님상속.손님;
import 캐릭터들.집안.주인공;

public class 오픈 {
	
	//시나리오 시나리오 = new 시나리오();
	JFrame 팝업;
	
	int 영업일수 = 0;
	int 영업시간세팅 = 8*60;
	int 영업시간 = 영업시간세팅;
	
	오픈_고객응대 오픈_고객응대;
	오픈_요리 오픈_요리;	
	오픈_서빙 오픈_서빙;
	오픈_다음타임 오픈_다음타임; 
	
	메뉴 메뉴;
	요리 요리;
	int 요리시간_디폴트 = 0;
	int 손님_수_디폴트 = 3;
	int 요리시간 = 요리시간_디폴트;
	int 손님_수 = 손님_수_디폴트;
	int 메뉴_가격 = 1; 
	boolean 알바유무 = false;
	boolean 화구유무 = false;
	String 주문지_전체;
	public String test;
	
	int 실패횟수;
	int 서빙_성공_수;
	int 서빙_성공_수_대결;
	
	int 요청사항_성공_수;
	int 추가주문_성공_수;
	boolean 대결종료 = false; 
	
	List<String> 손님_리스트; 	
	Map<String, 손님> 현재_총_손님;
	List<요리> 받은_메뉴; //받은_메뉴에 받은_메뉴 차례로 저장. 요리된 메뉴는 요리후 요리된 메뉴에 저장.  
	List<요리> 요리된_메뉴;
	
	public 오픈() {
		
	}
	
	@SuppressWarnings("static-access")
	public void 오픈(주인공 주인공) {
		
		시나리오.출력(시나리오.선나누기);
		음악 음악 = new 음악();
		음악.음악(5);
		시나리오.점점점("");
		시나리오.출력("\n"+	주인공.get이름() +" 님 "+시나리오.주인공_영업시작멘트());
		일수카운트(주인공);	
		화구유무 = 주인공.화구_여부_리턴();
		주인공.대기중 = true;
		
		//고객_메뉴선택();
		//this.알바유무 = 주인공.get보유직원리스트().contains("알바");
		시나리오.출력("영업 일수: " + 영업일수 + " 일");
		시나리오.출력("돈: " + 주인공.get돈() + "만원");
		시나리오.출력("팬 여부: " + 주인공.팬_여부());
		시나리오.출력("화구 여부: " + 주인공.화구_여부());
		시나리오.출력("알바여부: " + (주인공.홀직원_여부() ? 시나리오.있음: 시나리오.없음));
		시나리오.출력("미션 성공 수: "+ 주인공.get미션_성공수());
		시나리오.출력("서빙 성공 수: "+ 주인공.미션보드.정보.get서빙_성공_수());
		시나리오.출력("요청사항_성공_수: " + 주인공.미션보드.정보.get요청사항_성공_수());
		시나리오.출력("상대 집안 특기 : " + 주인공.get상대집안특기());
		시나리오.출력("요리사 종류 : " + 주인공.요리사_여부());
		
		시나리오.출력("");
		시나리오.출력("남은 영업 시간: " + 영업시간/60 + " 시간");
		시나리오.출력("어떤 일을 하시겠어요?\n"
				+ "1.고객응대   2.요리   3.휴식   5.정보 보기   6.진행 미션 확인");	
		시나리오.한줄("선택한 활동: ");
		
		int 영업선택 = 시나리오.선택(); 
		if(영업선택 == 1) 			{음악.음악중지(); 시나리오.음악(4,10000); 
		고객응대(주인공);}
		else if(영업선택 == 2)		{음악.음악중지(); 시나리오.음악(4,10000); 홀_체크(주인공);}
		else if(영업선택 == 3) 	{음악.음악중지(); 영업시간=영업시간-60; 	시나리오.출력(""); 시나리오.점점점("1시간 휴식"); 시나리오.영업선택(주인공);}
		else if(영업선택 == 5)		{주인공.set타임어택완료(true); 주인공.오픈에서정보보기(주인공);}
		else if(영업선택 == 6)		{주인공.미션보드.진행상태(); 시나리오.엔터(); 오픈(주인공);}
	}
	
	//1.1 선택: 고객응대 
	public void 고객응대(주인공 주인공) {
		
		주인공.대기중 = false;
		오픈_고객응대_시작();
		오픈_고객응대.고객응대(주인공);
	
	}
	public void 고객응대_대결(주인공 주인공) {
		
		서빙_성공_수_대결 = 0;
		오픈_고객응대_시작();
		오픈_고객응대.고객응대_대결(주인공);
		
	}
	//1.2 선택: 요리 -> 홀_체크
	protected void 홀_체크(주인공 주인공) {
		오픈_고객응대_시작();
		오픈_고객응대.홀_체크(주인공);
	
		요리_시작(주인공);
	}
	private void 오픈_고객응대_시작() {
		
		Map<String, Object> 고객응대_시작_변수 = 다음_단계_준비();
		
		오픈_고객응대 = new 오픈_고객응대(고객응대_시작_변수);
	}
	public Map<String, Object> 다음_단계_준비() {
		Map<String, Object> 종료_변수;
		종료_변수 = new HashMap<String, Object>();
		종료_변수.put("영업일수", 영업일수);
		종료_변수.put("영업시간", 영업시간);
		종료_변수.put("알바유무", 알바유무);
		종료_변수.put("요리시간", 요리시간);
		종료_변수.put("손님_수", 손님_수);
		종료_변수.put("손님_리스트", 손님_리스트);
		종료_변수.put("현재_총_손님", 현재_총_손님);
		종료_변수.put("받은_메뉴", 받은_메뉴);
		종료_변수.put("요리된_메뉴", 요리된_메뉴);
		종료_변수.put("서빙_성공_수", 서빙_성공_수);
		종료_변수.put("요청사항_성공_수", 요청사항_성공_수);
		종료_변수.put("추가주문_성공_수", 추가주문_성공_수);
		종료_변수.put("서빙_성공_수_대결", 서빙_성공_수_대결);

		
		return 종료_변수; 
	}
	
	//2.요리
	protected void 요리_시작(주인공 주인공) {
		
		오픈_요리_시작();
		오픈_요리.요리_시작(주인공);

	}
	protected void 요리_시작_대결(주인공 주인공) {
		
		오픈_요리_시작();
		오픈_요리.요리_시작_대결(주인공);

	}
	private void 오픈_요리_시작() {
		Map<String, Object> 요리_시작_변수 = 다음_단계_준비();
		
		오픈_요리 = new 오픈_요리(요리_시작_변수);
	}

	//3. 서빙
	protected void 서빙_시작(주인공 주인공) {
		
		오픈_서빙_시작();
		오픈_서빙.서빙_시작(주인공);
	
	}
	protected void 서빙_시작_대결(주인공 주인공) {
		
		오픈_서빙_시작();
		오픈_서빙.서빙_시작_대결(주인공);
	
	}
	private void 오픈_서빙_시작() {
		Map<String, Object> 서빙_시작_변수 = 다음_단계_준비();
		
		오픈_서빙 = new 오픈_서빙(서빙_시작_변수); 
	
	}
	//4. 다음타임
	protected void 다음타임_시작(주인공 주인공) {
		
		오픈_다음타임_시작();
		오픈_다음타임.다음타임_시작(주인공);
	
	}
	protected void 다음타임_시작_대결(주인공 주인공) {
		
		주인공.set타임어택완료(true);
		오픈_다음타임_시작();
		오픈_다음타임.다음타임_시작_대결(주인공);
	
	}
	private void 오픈_다음타임_시작() {
		Map<String, Object> 다음타임_시작_변수 = 다음_단계_준비();
		
		오픈_다음타임 = new 오픈_다음타임(다음타임_시작_변수); 
		
	}
	
	
	//5. 오픈 클래스 관련
	private void 일수카운트(주인공 주인공){
		if(영업시간 == 0) {
			영업일수 = 영업일수 + 1;
			영업시간 = 영업시간세팅;		
			주인공.정보보기(주인공);
		}else if(영업일수%7 == 0 && 영업일수 != 0) {
			System.out.println("오늘은 쉬는 날입니다.");
			영업일수 = 영업일수 + 1;
		}
	}
	//7.Thread
	protected Thread stop(주인공 주인공) {
		System.out.println("스탑 시작");
		Thread thread4 = new Thread( () -> {
			while(true) {
				if(주인공.get타임어택실패()) {
					System.out.println("타임어택 미완료..");
					
					오픈(주인공);
					break;
					
				}
			}
		});
		return thread4; 
		
	}
	
	
	
	
	//6 Communication
	
	
	public void set손님_수(int 손님_수) {
		this.손님_수 = 손님_수;
	}
	public void set화구유무(boolean 화구유무) {
		this.화구유무 = 화구유무;
	}
	public void set알바유무(boolean 알바유무) {
		this.알바유무 = 알바유무;
	}
	public void set요리시간(int 요리시간) {
		this.요리시간 = 요리시간;
	}
	public void set대결종료(boolean 대결종료) {
		this.대결종료 = 대결종료;
	}
	public void set서빙_성공_수(int 서빙_성공_수) {
		this.서빙_성공_수 = 서빙_성공_수;
	}
	public void set서빙_성공_수_대결(int 서빙_성공_수_대결) {
		this.서빙_성공_수_대결 = 서빙_성공_수_대결;
	}
	public List<요리> get받은_메뉴() {
		return 받은_메뉴;
	}
	
	public int get손님_수() {
		return 손님_수;
	}
	public boolean get알바유무() {
		return 알바유무;
	}
	public boolean get화구유무() {
		return 화구유무;
	}
	public int get서빙_성공_수() {
		return 서빙_성공_수;
	}
	public boolean get대결종료() {
		return 대결종료;
	}
	public int get요리시간_디폴트() {
		return 요리시간_디폴트;
	}
	public int get손님_수_디폴트() {
		return 손님_수_디폴트;
	}
	public int get서빙_성공_수_대결() {
		return 서빙_성공_수_대결;
	}
	public 오픈_고객응대 get오픈_고객응대() {
		return 오픈_고객응대; 
	}
	
	
	

}
